// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AppUser {
  id        String    @id @default(uuid())
  email     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lastSeen  DateTime?

  // user storekit locale
  storeKitCountryCode String?

  transactions Transaction[]

  App   App?    @relation(fields: [appId], references: [id])
  appId String?
}

model App {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // app storekit bundle id
  storeKitBundleId String?

  // app google play package name
  googlePlayPackageName String?

  // subscription groups
  subscriptionGroups SubscriptionGroup[]

  // products
  products Product[]

  // app users
  users AppUser[]

  // app transactions
  transactions Transaction[]
}

// a subscription group contains a list of products
model SubscriptionGroup {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
  App         App?      @relation(fields: [appId], references: [id])
  appId       String?
}

enum ProductType {
  Subscription
  OneTimePurchase
}

model Product {
  id          String  @id @unique
  name        String
  description String?

  productType ProductType

  storeKitProductId String?
  storeKitPriceTier String?

  googlePlayProductId String?
  googlePlayPriceTier String?

  stripeProductId     String?
  stripePriceValue    String?
  stripePriceCurrency String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions Transaction[]

  SubscriptionGroup   SubscriptionGroup? @relation(fields: [subscriptionGroupId], references: [id])
  subscriptionGroupId String?
  App                 App?               @relation(fields: [appId], references: [id])
  appId               String?
}

enum TransactionSource {
  StoreKit
  Stripe
  Paddle
  GooglePlay
}

enum TransactionType {
  Purchase
  Renewal
  Cancellation
  Refund
}

model Transaction {
  // id is the transaction id from the source, e.g. Apple's transaction id
  id String @id @unique @default(uuid())

  // source: StoreKit, Stripe, Paddle, GooglePlay
  source              TransactionSource
  sourceTransactionId String

  // transaction type
  transactionType TransactionType

  // rawPayload is the raw payload from the source, json object
  rawPayload String

  // purchase date
  purchaseDate DateTime

  // The date the subscription expires or renews.
  expirationDate DateTime?

  // when the subscription is cancelled, available for cancellation
  cancellationDate DateTime?

  // available for refunds
  revocationDate DateTime?

  quantity Int @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      AppUser  @relation(fields: [userId], references: [id])
  userId    String

  // the original transaction this transaction is related to, for example a renewal transaction of a subscription.
  // This field is null for the original transaction or for a one time purchase.
  originalTransactionId String?
  originalTransaction   Transaction?  @relation("OriginalTransactionRelation", fields: [originalTransactionId], references: [id])
  relatedTransactions   Transaction[] @relation("OriginalTransactionRelation")

  // the product this transaction is for
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?

  // the app this transaction is for
  App   App?    @relation(fields: [appId], references: [id])
  appId String?
}
