generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AppUser {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // external user id, e.g. firebase uid
  externalUserId String?

  App   App    @relation(fields: [appId], references: [id])
  appId String

  customAttributes      Json?
  communicationChannels CommunicationChannel[]
  transactions          Transaction[]
}

enum CommunicationChannelType {
  Email
  Push
}

enum CommunicationChannelSubType {
  PushAPNS
  PushFCM
}

model CommunicationChannel {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  lastSeen    DateTime?

  isActive Boolean @default(true)

  // communication channel type
  type CommunicationChannelType

  // communication channel sub type
  subType CommunicationChannelSubType?

  // communication channel address, e.g. email address, push token
  address String

  AppUser   AppUser? @relation(fields: [appUserId], references: [id])
  appUserId String?
}

model App {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // app storekit bundle id
  storeKitBundleId String?

  // app google play package name
  googlePlayPackageName String?

  // subscription groups
  subscriptionGroups SubscriptionGroup[]

  // app users
  users AppUser[]

  // app transactions
  transactions Transaction[]
}

// a subscription group contains a list of products
model SubscriptionGroup {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subscriptions Subscription[]

  App   App    @relation(fields: [appId], references: [id])
  appId String
}

enum DurationUnit {
  Day
  Week
  Month
  Year
}

model Subscription {
  id          String  @id @unique
  name        String
  description String?

  storeKitProductId String?
  storeKitPriceTier String?

  googlePlayProductId String?
  googlePlayPriceTier String?

  stripeProductId     String?
  stripePriceValue    String?
  stripePriceCurrency String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions Transaction[]

  SubscriptionGroup   SubscriptionGroup @relation(fields: [subscriptionGroupId], references: [id])
  subscriptionGroupId String

  durationUnit  DurationUnit
  durationValue Int
}

enum TransactionSource {
  StoreKit
  Stripe
  Paddle
  GooglePlay
}

enum TransactionType {
  Purchase
  Renewal
  Cancellation
  Refund
}

enum Environemnt {
  Production
  Sandbox
}

model Transaction {
  // id is the transaction id from the source, e.g. Apple's transaction id
  id String @id @unique @default(uuid())

  // source: StoreKit, Stripe, Paddle, GooglePlay
  source              TransactionSource
  sourceTransactionId String

  // transaction type
  transactionType TransactionType

  // rawPayload is the raw payload from the source, json object
  rawPayload String

  purchaseDate DateTime

  // The date the subscription expires or renews.
  expirationDate DateTime?

  // when the subscription is cancelled, available for cancellation
  cancellationDate DateTime?

  // available for refunds
  revocationDate DateTime?

  // environment: Production, Sandbox
  environment Environemnt

  quantity Int @default(1)

  createdAt DateTime @default(now())

  // updated at is the last time the transaction was updated
  updatedAt DateTime @updatedAt

  // the original transaction this transaction is related to, for example a renewal transaction of a subscription.
  // This field is null for the original transaction or for a one time purchase.
  originalTransactionId String?
  originalTransaction   Transaction?  @relation("OriginalTransactionRelation", fields: [originalTransactionId], references: [id])
  relatedTransactions   Transaction[] @relation("OriginalTransactionRelation")

  // the app this transaction is for
  App   App?    @relation(fields: [appId], references: [id])
  appId String?

  Subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?

  AppUser   AppUser? @relation(fields: [appUserId], references: [id])
  appUserId String?
}
